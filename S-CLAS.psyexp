<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'Audio': &quot;['Yes', 'No']&quot;, 'Debug': &quot;['No', 'Yes']&quot;}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="['resources\\aud\\Replay instructions.m4a', 'resources\\seqs\\conditions.csv', 'resources\\aud\\S-CLAS Intro.m4a', 'resources\\aud\\S-CLAS Q01.m4a', 'resources\\aud\\S-CLAS Q02.m4a', 'resources\\aud\\S-CLAS Q03.m4a', 'resources\\aud\\S-CLAS Q04.m4a', 'resources\\aud\\S-CLAS Q05.m4a', 'resources\\aud\\S-CLAS Q06.m4a', 'resources\\aud\\S-CLAS Q07.m4a', 'resources\\aud\\S-CLAS Q08.m4a', 'resources\\aud\\S-CLAS Q09a.m4a', 'resources\\aud\\S-CLAS Q09b.m4a', 'resources\\aud\\S-CLAS Q09c.m4a', 'resources\\aud\\S-CLAS Q10.m4a', 'resources\\aud\\S-CLAS Q11.m4a', 'resources\\aud\\S-CLAS Q12.m4a', 'resources\\aud\\S-CLAS Q13.m4a', 'resources\\aud\\S-CLAS Q14.m4a', 'resources\\imgs\\slides\\slide-01.png', 'resources\\imgs\\slides\\slide-02.png', 'resources\\imgs\\slides\\slide-03.png', 'resources\\imgs\\slides\\slide-04.png', 'resources\\imgs\\slides\\slide-05.png', 'resources\\imgs\\slides\\slide-06.png', 'resources\\imgs\\slides\\slide-07.png', 'resources\\imgs\\slides\\slide-08.png', 'resources\\imgs\\slides\\slide-09.png', 'resources\\imgs\\slides\\slide-10.png', 'resources\\imgs\\slides\\slide-11.png', 'resources\\imgs\\slides\\slide-12.png', 'resources\\imgs\\slides\\slide-13.png', 'resources\\imgs\\slides\\slide-14.png', 'resources\\imgs\\slides\\slide-15.png', 'resources\\imgs\\slides\\slide-16.png', 'resources\\imgs\\slides\\slide-17.png']" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1512, 982]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[1,1,1]" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="S-CLAS" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="begin">
      <CodeComponent name="begin_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;# Might want to remove audio toggle eventually&amp;#10;#expInfo[&quot;Debug&quot;] = &quot;No&quot;&amp;#10;#expInfo[&quot;Audio&quot;] = &quot;Yes&quot;&amp;#10;&amp;#10;expVersion = &quot;2022.09.23&quot;&amp;#10;AUD_DIR = &quot;resources/aud&quot;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;&amp;#10;SLIDES_DIR = f&quot;{IMGS_DIR}/slides&quot;&amp;#10;SEQ_FILE = &quot;resources/seqs/conditions.csv&quot;&amp;#10;REPLAY_AUD_FILE = f&quot;{AUD_DIR}/Replay instructions.m4a&quot;&amp;#10;&amp;#10;USE_AUDIO = expInfo[&quot;Audio&quot;] == &quot;Yes&quot;&amp;#10;SHOW_DEBUG = expInfo[&quot;Debug&quot;] == &quot;Yes&quot;&amp;#10;&amp;#10;CLICK_BOX_OPACITY = 0.2 if SHOW_DEBUG else 0&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;Slides are 1052 x 745 pixels.&amp;#10;Positions and sizes of clickable areas are hard &amp;#10;coded, so changing this will break _everything_!&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;SLIDE_H = 0.7&amp;#10;SLIDE_W = SLIDE_H / 745 * 1052&amp;#10;SLIDE_SIZE = (SLIDE_W, SLIDE_H)&amp;#10;&amp;#10;# &quot;Next&quot; button at top-right&amp;#10;NEXT_POS = (0.39, 0.265)&amp;#10;NEXT_SIZE = (0.165, 0.075)&amp;#10;NEXT = make_rect(&quot;next&quot;, NEXT_POS, NEXT_SIZE, CLICK_BOX_OPACITY)&amp;#10;&amp;#10;# &quot;Replay&quot; button at top-left&amp;#10;REPLAY_POS = (-0.376, 0.265)&amp;#10;REPLAY_SIZE = (0.165, 0.075)&amp;#10;REPLAY = make_rect(&quot;replay&quot;, REPLAY_POS, REPLAY_SIZE, CLICK_BOX_OPACITY)&amp;#10;&amp;#10;# For covering &quot;Next&quot; button&amp;#10;COVER_SIZE = (0.17, 0.08)&amp;#10;COVER = make_rect(&quot;cover&quot;, NEXT_POS, COVER_SIZE, None, &quot;white&quot;, 0, &quot;white&quot;)&amp;#10;&amp;#10;# For covering &quot;Replay&quot; button&amp;#10;REPLAY_COVER_SIZE = (0.17, 0.08)&amp;#10;REPLAY_COVER = make_rect(&quot;replay_cover&quot;, REPLAY_POS, REPLAY_COVER_SIZE, None, &quot;white&quot;, 0, &quot;white&quot;)&amp;#10;&amp;#10;&amp;#10;# Global mouse&amp;#10;MOUSE = core.Mouse(win=win)&amp;#10;MOUSE_L = 0&amp;#10;MOUSE_L_prev = 0&amp;#10;&amp;#10;# Global sound&amp;#10;SOUND = None&amp;#10;&amp;#10;all_cimgs = {&amp;#10;    &quot;slide-02&quot;: get_trees,&amp;#10;    &quot;slide-03&quot;: get_vehicles,&amp;#10;    &quot;slide-04&quot;: get_speed,&amp;#10;    &quot;slide-05&quot;: get_weight,&amp;#10;    &quot;slide-06&quot;: get_weather,&amp;#10;    &quot;slide-07&quot;: get_tools,&amp;#10;    &quot;slide-08&quot;: get_carrots,&amp;#10;    &quot;slide-09&quot;: get_badminton,&amp;#10;    &quot;slide-10&quot;: get_prepositions1,&amp;#10;    &quot;slide-11&quot;: get_prepositions2,&amp;#10;    &quot;slide-12&quot;: get_room1,&amp;#10;    &quot;slide-13&quot;: get_pen1,&amp;#10;    &quot;slide-14&quot;: get_pen2,&amp;#10;    &quot;slide-15&quot;: get_animals,&amp;#10;    &quot;slide-16&quot;: get_look,&amp;#10;    &quot;slide-17&quot;: get_mice,&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="expVersion = &quot;2022.09.23&quot;;&amp;#10;AUD_DIR = &quot;resources/aud&quot;;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;;&amp;#10;SLIDES_DIR = `${IMGS_DIR}/slides`;&amp;#10;SEQ_FILE = &quot;resources/seqs/conditions.csv&quot;;&amp;#10;REPLAY_AUD_FILE = `${AUD_DIR}/Replay instructions.m4a`;&amp;#10;USE_AUDIO = (expInfo[&quot;Audio&quot;] === &quot;Yes&quot;);&amp;#10;SHOW_DEBUG = (expInfo[&quot;Debug&quot;] === &quot;Yes&quot;);&amp;#10;CLICK_BOX_OPACITY = (SHOW_DEBUG ? 0.2 : 0);&amp;#10;/*&amp;#10;Slides are 1052 x 745 pixels.&amp;#10;Positions and sizes of clickable areas are hard&amp;#10;coded, so changing this will break _everything_!&amp;#10;*/&amp;#10;SLIDE_H = 0.7;&amp;#10;SLIDE_W = ((SLIDE_H / 745) * 1052);&amp;#10;SLIDE_SIZE = [SLIDE_W, SLIDE_H];&amp;#10;NEXT_POS = [0.39, 0.265];&amp;#10;NEXT_SIZE = [0.165, 0.075];&amp;#10;NEXT = make_rect(&quot;next&quot;, NEXT_POS, NEXT_SIZE, CLICK_BOX_OPACITY);&amp;#10;REPLAY_POS = [(- 0.376), 0.265];&amp;#10;REPLAY_SIZE = [0.165, 0.075];&amp;#10;REPLAY = make_rect(&quot;replay&quot;, REPLAY_POS, REPLAY_SIZE, CLICK_BOX_OPACITY);&amp;#10;COVER_SIZE = [0.17, 0.08];&amp;#10;COVER = make_rect(&quot;cover&quot;, NEXT_POS, COVER_SIZE, null, &quot;white&quot;, 0, &quot;white&quot;);&amp;#10;REPLAY_COVER_SIZE = [0.17, 0.08];&amp;#10;REPLAY_COVER = make_rect(&quot;replay_cover&quot;, REPLAY_POS, REPLAY_COVER_SIZE, null, &quot;white&quot;, 0, &quot;white&quot;);&amp;#10;MOUSE = new core.Mouse({&quot;win&quot;: psychoJS.window});&amp;#10;MOUSE_L = 0;&amp;#10;MOUSE_L_prev = 0;&amp;#10;SOUND = null;&amp;#10;all_cimgs = {&quot;slide-02&quot;: get_trees, &quot;slide-03&quot;: get_vehicles, &quot;slide-04&quot;: get_speed, &quot;slide-05&quot;: get_weight, &quot;slide-06&quot;: get_weather, &quot;slide-07&quot;: get_tools, &quot;slide-08&quot;: get_carrots, &quot;slide-09&quot;: get_badminton, &quot;slide-10&quot;: get_prepositions1, &quot;slide-11&quot;: get_prepositions2, &quot;slide-12&quot;: get_room1, &quot;slide-13&quot;: get_pen1, &quot;slide-14&quot;: get_pen2, &quot;slide-15&quot;: get_animals, &quot;slide-16&quot;: get_look, &quot;slide-17&quot;: get_mice};&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="slide = make_slide(&quot;slide-01&quot;);&amp;#10;slide.autoDraw = true;&amp;#10;REPLAY.autoDraw = true;&amp;#10;NEXT.autoDraw = true;&amp;#10;COVER.autoDraw = true;&amp;#10;COVER.opacity = 0.9;&amp;#10;REPLAY_COVER.autoDraw = true;&amp;#10;REPLAY_COVER.opacity = 0.7;&amp;#10;if (USE_AUDIO) {&amp;#10;    aud_file = `${AUD_DIR}/S-CLAS Intro.m4a`;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_START = 0;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;slide = make_slide(&quot;slide-01&quot;)&amp;#10;slide.autoDraw = True&amp;#10;REPLAY.autoDraw = True&amp;#10;NEXT.autoDraw = True&amp;#10;COVER.autoDraw = True&amp;#10;COVER.opacity = 0.9&amp;#10;REPLAY_COVER.autoDraw = True&amp;#10;REPLAY_COVER.opacity = 0.7&amp;#10;&amp;#10;if USE_AUDIO: &amp;#10;    aud_file = f&quot;{AUD_DIR}/S-CLAS Intro.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_START = 0&amp;#10;    SOUND.play()&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;# Clicking on &quot;Next&quot; is always enabled here&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L and NEXT.contains(MOUSE):&amp;#10;        continueRoutine = False&amp;#10;    if REPLAY.contains(MOUSE):&amp;#10;            if t - SOUND_START &lt; SOUND_DUR:&amp;#10;                # Will only work if the sound has not ended yet&amp;#10;                SOUND.stop()&amp;#10;            SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;            SOUND_START = t&amp;#10;            SOUND.play()&amp;#10;&amp;#10;#show replay button after playing half of sound&amp;#10;if t - SOUND_START &gt;= SOUND_DUR / 2:&amp;#10;    REPLAY_COVER.opacity = 0&amp;#10;    &amp;#10;if t - SOUND_START &gt;= SOUND_DUR:&amp;#10;    COVER.opacity = 0&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    begin_text.text = f&quot;&quot;&quot;&amp;#10;aud_file = {aud_file}&amp;#10;t = {round(t, 3)}&amp;#10;sound_completed = {t - SOUND_START &gt;= SOUND_DUR}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if ((MOUSE_L &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;    if (REPLAY.contains(MOUSE)) {&amp;#10;        if (((t - SOUND_START) &lt; SOUND_DUR)) {&amp;#10;            SOUND.stop();&amp;#10;        }&amp;#10;        SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;        SOUND_START = t;&amp;#10;        SOUND.play();&amp;#10;    }&amp;#10;}&amp;#10;if (((t - SOUND_START) &gt;= (SOUND_DUR / 2))) {&amp;#10;    REPLAY_COVER.opacity = 0;&amp;#10;}&amp;#10;if (((t - SOUND_START) &gt;= SOUND_DUR)) {&amp;#10;    COVER.opacity = 0;&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    begin_text.text = `&amp;#10;aud_file = ${aud_file}&amp;#10;t = ${round(t, 3)}&amp;#10;sound_completed = ${((t - SOUND_START) &gt;= SOUND_DUR)}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="NEXT.autoDraw = false;&amp;#10;REPLAY.autoDraw = false;&amp;#10;slide.autoDraw = false;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;NEXT.autoDraw = False&amp;#10;REPLAY.autoDraw = False&amp;#10;slide.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="begin_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="functions_g">
        <Param name="Before Experiment" updates="constant" val="&amp;#10;def make_sound(name, filepath):&amp;#10;    return sound.Sound(&amp;#10;        win=win,&amp;#10;        value=filepath,&amp;#10;        secs=-1,&amp;#10;        stereo=True,&amp;#10;        hamming=True,&amp;#10;        name=name&amp;#10;    )&amp;#10;&amp;#10;def make_img(name, file_name, pos, size, opacity):&amp;#10;    return visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        image=file_name,&amp;#10;        pos=pos,&amp;#10;        size=size,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_slide(name, pos=(0, 0), size=SLIDE_SIZE):&amp;#10;    return make_img(&amp;#10;        name,&amp;#10;        f&quot;{SLIDES_DIR}/{name}.png&quot;,&amp;#10;        pos, size, 1&amp;#10;    )&amp;#10;&amp;#10;def make_rect(&amp;#10;    name, pos, size, opacity,&amp;#10;    lineColor=&quot;green&quot;,&amp;#10;    lineWidth=3,&amp;#10;    fillColor=None&amp;#10;):&amp;#10;    if fillColor is not None:&amp;#10;        fillColor = util.Color(fillColor)&amp;#10;    if lineColor is not None:&amp;#10;        lineColor = util.Color(lineColor)&amp;#10;    return visual.Rect(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        width=size[0],&amp;#10;        height=size[1],&amp;#10;        pos=pos,&amp;#10;        lineWidth=lineWidth,&amp;#10;        lineColor=lineColor,&amp;#10;        fillColor=fillColor,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_boxes(names, xys, sizes, opacity=CLICK_BOX_OPACITY, lineColor=&quot;green&quot;):&amp;#10;    cimgs = []&amp;#10;    for i in range(len(names)):&amp;#10;        cimgs.append(make_rect(names[i], xys[i], sizes[i], opacity, lineColor))&amp;#10;    return cimgs&amp;#10;&amp;#10;def make_circle(&amp;#10;    name, pos, size,&amp;#10;    fillColor=&quot;black&quot;,&amp;#10;    lineColor=&quot;black&quot;,&amp;#10;    lineWidth=3,&amp;#10;    opacity=1&amp;#10;):&amp;#10;    if lineColor is not None:&amp;#10;        lineColor = util.Color(lineColor)&amp;#10;    if fillColor is not None:&amp;#10;        fillColor = util.Color(fillColor)&amp;#10;    return visual.Polygon(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        edges=360,&amp;#10;        size=size,&amp;#10;        pos=pos,&amp;#10;        lineWidth=lineWidth,&amp;#10;        lineColor=lineColor,&amp;#10;        fillColor=fillColor,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_radio0(name, pos):&amp;#10;    return make_circle(name, pos, (0.03, 0.03), None, &quot;black&quot;)&amp;#10;&amp;#10;def make_radio1(name, pos):&amp;#10;    return make_circle(name, pos, (0.023, 0.023), &quot;black&quot;, None, 0)&amp;#10;&amp;#10;def find_min_y(cimgs):&amp;#10;    min_y = 0.5&amp;#10;    for cimg in cimgs:&amp;#10;        y = cimg.pos[1] - (cimg.height / 2)&amp;#10;        if min_y &gt; y:&amp;#10;            min_y = y&amp;#10;    return min_y&amp;#10;&amp;#10;def make_radios(func, cimgs, res=[], offset=-0.05):&amp;#10;    min_y = find_min_y(cimgs)&amp;#10;    for cimg in cimgs:&amp;#10;        radio_y = min_y + offset&amp;#10;        res.append(func(cimg.name, (cimg.pos[0], radio_y)))&amp;#10;    return res&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="function make_sound(name, filepath) {&amp;#10;    return new sound.Sound({&quot;win&quot;: psychoJS.window, &quot;value&quot;: filepath, &quot;secs&quot;: (- 1), &quot;stereo&quot;: true, &quot;hamming&quot;: true, &quot;name&quot;: name});&amp;#10;}&amp;#10;function make_img(name, file_name, pos, size, opacity) {&amp;#10;    return new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;image&quot;: file_name, &quot;pos&quot;: pos, &quot;size&quot;: size, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_slide(name, pos = [0, 0], size = SLIDE_SIZE) {&amp;#10;    return make_img(name, `${SLIDES_DIR}/${name}.png`, pos, size, 1);&amp;#10;}&amp;#10;function make_rect(name, pos, size, opacity, lineColor = &quot;green&quot;, lineWidth = 3, fillColor = null) {&amp;#10;    if ((fillColor !== null)) {&amp;#10;        fillColor = new util.Color(fillColor);&amp;#10;    }&amp;#10;    if ((lineColor !== null)) {&amp;#10;        lineColor = new util.Color(lineColor);&amp;#10;    }&amp;#10;    return new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;width&quot;: size[0], &quot;height&quot;: size[1], &quot;pos&quot;: pos, &quot;lineWidth&quot;: lineWidth, &quot;lineColor&quot;: lineColor, &quot;fillColor&quot;: fillColor, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_boxes(names, xys, sizes, opacity = CLICK_BOX_OPACITY, lineColor = &quot;green&quot;) {&amp;#10;    var cimgs;&amp;#10;    cimgs = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(names.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        cimgs.push(make_rect(names[i], xys[i], sizes[i], opacity, lineColor));&amp;#10;    }&amp;#10;    return cimgs;&amp;#10;}&amp;#10;function make_circle(name, pos, size, fillColor = &quot;black&quot;, lineColor = &quot;black&quot;, lineWidth = 3, opacity = 1) {&amp;#10;    if ((lineColor !== null)) {&amp;#10;        lineColor = new util.Color(lineColor);&amp;#10;    }&amp;#10;    if ((fillColor !== null)) {&amp;#10;        fillColor = new util.Color(fillColor);&amp;#10;    }&amp;#10;    return new visual.Polygon({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;edges&quot;: 360, &quot;size&quot;: size, &quot;pos&quot;: pos, &quot;lineWidth&quot;: lineWidth, &quot;lineColor&quot;: lineColor, &quot;fillColor&quot;: fillColor, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_radio0(name, pos) {&amp;#10;    return make_circle(name, pos, [0.03, 0.03], null, &quot;black&quot;);&amp;#10;}&amp;#10;function make_radio1(name, pos) {&amp;#10;    return make_circle(name, pos, [0.023, 0.023], &quot;black&quot;, null, 0);&amp;#10;}&amp;#10;function find_min_y(cimgs) {&amp;#10;    var min_y, y;&amp;#10;    min_y = 0.5;&amp;#10;    for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        cimg = _pj_a[_pj_c];&amp;#10;        y = (cimg.pos[1] - (cimg.height / 2));&amp;#10;        if ((min_y &gt; y)) {&amp;#10;            min_y = y;&amp;#10;        }&amp;#10;    }&amp;#10;    return min_y;&amp;#10;}&amp;#10;function make_radios(func, cimgs, res = [], offset = (- 0.05)) {&amp;#10;    var min_y, radio_y;&amp;#10;    min_y = find_min_y(cimgs);&amp;#10;    for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        cimg = _pj_a[_pj_c];&amp;#10;        radio_y = (min_y + offset);&amp;#10;        res.push(func(cimg.name, [cimg.pos[0], radio_y]));&amp;#10;    }&amp;#10;    return res;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="functions_g" valType="code"/>
      </CodeComponent>
      <CodeComponent name="specs_SCLAS">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;# S-CLAS&amp;#10;&amp;#10;def get_trees():&amp;#10;    # Slide 02&amp;#10;    names = (&quot;tree1&quot;, &quot;tree2&quot;, &quot;tree3&quot;, &quot;tree4&quot;)&amp;#10;    xys = [(-0.326, -0.1), (-0.087, -0.195), (0.135, -0.163), (0.367, -0.18)]&amp;#10;    sizes = [(0.23, 0.38), (0.115, 0.185), (0.16, 0.25), (0.132, 0.215)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_vehicles():&amp;#10;    # Slide 03&amp;#10;    names = (&quot;car&quot;, &quot;ball&quot;, &quot;bicycle&quot;, &quot;bus&quot;)&amp;#10;    y0 = -0.178&amp;#10;    xys = [(-0.374, y0 + 0.002), (-0.153, y0 + 0.001), (0.08, y0), (0.3425, y0)]&amp;#10;    sizes = [(0.176, 0.129), (0.18, 0.13), (0.21, 0.135), (0.235, 0.135)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_speed():&amp;#10;    # Slide 04&amp;#10;    names = (&quot;faster&quot;, &quot;big&quot;, &quot;slow&quot;, &quot;old&quot;)&amp;#10;    y0 = -0.219&amp;#10;    xys = [(-0.37, y0), (-0.149, y0), (0.083, y0 - 0.003), (0.338, y0 - 0.003)]&amp;#10;    sizes = [(0.172, 0.125), (0.177, 0.13), (0.21, 0.13), (0.217, 0.13)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_weight():&amp;#10;    # Slide 05&amp;#10;    names = (&quot;dark&quot;, &quot;heavy&quot;, &quot;smooth&quot;, &quot;grey&quot;)&amp;#10;    y0 = -0.255&amp;#10;    xys = [(-0.37, y0), (-0.149, y0), (0.083, y0 - 0.003), (0.338, y0 - 0.003)]&amp;#10;    sizes = [(0.172, 0.125), (0.177, 0.13), (0.21, 0.13), (0.217, 0.13)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_weather():&amp;#10;    # Slide 06&amp;#10;    names = (&quot;cloudy&quot;, &quot;sunny&quot;, &quot;rainy&quot;,&quot;thundery&quot;)&amp;#10;    y0 = -0.162&amp;#10;    xys = [(-0.36, y0 + 0.005), (-0.143, y0), (-0.143 + 0.177 + 0.061, y0),(-0.143 + 0.177 + 0.208 + 0.061 + 0.035, y0)]&amp;#10;    sizes = [(0.172, 0.125), (0.177, 0.13), (0.208, 0.13),(0.220, 0.13)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_tools():&amp;#10;    # Slide 07&amp;#10;    names = (&quot;scissors&quot;, &quot;nail&quot;, &quot;tweezers&quot;, &quot;tongs&quot;)&amp;#10;    y0 = -0.133&amp;#10;    xys = [(-0.37, y0 + 0.003), (-0.149, y0), (0.083, y0), (0.347, y0)]&amp;#10;    sizes = [(0.172, 0.125), (0.177, 0.13), (0.21, 0.13), (0.235, 0.13)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_carrots():&amp;#10;    # Slide 08&amp;#10;    names = (&quot;he&quot;, &quot;she&quot;, &quot;they&quot;, &quot;one_carrot&quot;)&amp;#10;    y0 = -0.163&amp;#10;    h0 = 0.245&amp;#10;    xys = [(-0.34, y0), (-0.13, y0), (0.11, y0 + 0.002), (0.347, y0 + 0.002)]&amp;#10;    sizes = [(0.19, h0), (0.19, h0), (0.24, h0), (0.19, h0)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_badminton():&amp;#10;    # Slide 09&amp;#10;    names = (&quot;playing&quot;, &quot;played&quot;)&amp;#10;    y0 = -0.252&amp;#10;    h0 = 0.09&amp;#10;    xys = [(-0.255, y0), (0.27, y0)]&amp;#10;    sizes = [(0.4, h0), (0.37, h0)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_prepositions1():&amp;#10;    # Slide 10&amp;#10;    names = (&quot;at&quot;, &quot;on&quot;, &quot;in&quot;, &quot;above&quot;)&amp;#10;    y0 = -0.255&amp;#10;    xys = [(-0.37, y0), (-0.149, y0), (0.083, y0 - 0.003), (0.339, y0 - 0.003)]&amp;#10;    sizes = [(0.172, 0.125), (0.177, 0.13), (0.208, 0.13), (0.217, 0.13)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_prepositions2():&amp;#10;    # Slide 11&amp;#10;    names = (&quot;at&quot;, &quot;on&quot;, &quot;in&quot;, &quot;under&quot;)&amp;#10;    y0 = -0.255&amp;#10;    xys = [(-0.37, y0), (-0.149, y0), (0.083, y0 - 0.003), (0.339, y0 - 0.003)]&amp;#10;    sizes = [(0.172, 0.125), (0.177, 0.13), (0.208, 0.13), (0.217, 0.13)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_room1():&amp;#10;    # Slide 12&amp;#10;    names = (&quot;duck&quot;, &quot;apple&quot;, &quot;bear&quot;, &quot;cup&quot;)&amp;#10;    y0 = -0.255&amp;#10;    xys = [(-0.37, y0), (-0.149, y0), (0.083, y0 - 0.003), (0.339, y0 - 0.003)]&amp;#10;    sizes = [(0.172, 0.125), (0.177, 0.13), (0.208, 0.13), (0.217, 0.13)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_pen1():&amp;#10;    # Slide 13&amp;#10;    names = (&quot;P&quot;, &quot;M&quot;, &quot;N&quot;, &quot;B&quot;)&amp;#10;    y0 = -0.214&amp;#10;    w0 = 0.123&amp;#10;    h0 = 0.149&amp;#10;    xys = [(-0.35, y0), (-0.128, y0), (0.107, y0), (0.338, y0)]&amp;#10;    sizes = [(w0, h0), (w0, h0), (w0, h0), (w0, h0)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_pen2():&amp;#10;    # Slide 14&amp;#10;    names = (&quot;P&quot;, &quot;M&quot;, &quot;N&quot;, &quot;B&quot;)&amp;#10;    y0 = -0.195&amp;#10;    w0 = 0.123&amp;#10;    h0 = 0.149&amp;#10;    xys = [(-0.35, y0), (-0.128, y0), (0.107, y0), (0.338, y0)]&amp;#10;    sizes = [(w0, h0), (w0, h0), (w0, h0), (w0, h0)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_animals():&amp;#10;    # Slide 15&amp;#10;    names = (&quot;monkey&quot;, &quot;goose&quot;)&amp;#10;    y0 = -0.138&amp;#10;    h0 = 0.227&amp;#10;    xys = [(0.043, y0), (0.315, y0)]&amp;#10;    sizes = [(0.16, h0), (0.25, h0)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_look():&amp;#10;    # Slide 16&amp;#10;    names = (&quot;leaf&quot;, &quot;cup&quot;, &quot;book&quot;)&amp;#10;    y0 = -0.14&amp;#10;    xys = [(-0.09, y0 + 0.003), (0.125, y0 + 0.018), (0.35, y0)]&amp;#10;    sizes = [(0.135, 0.135), (0.12, 0.17), (0.19, 0.16)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;&amp;#10;def get_mice():&amp;#10;    # Slide 17&amp;#10;    names = (&quot;car&quot;, &quot;rice&quot;, &quot;map&quot;)&amp;#10;    y0 = -0.14&amp;#10;    xys = [(-0.075, y0), (0.15, y0 + 0.023), (0.368, y0)]&amp;#10;    sizes = [(0.21, 0.09), (0.155, 0.165), (0.18, 0.155)]&amp;#10;    return make_boxes(names, xys, sizes)&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="function get_trees() {&amp;#10;    var names, sizes, xys;&amp;#10;    names = [&quot;tree1&quot;, &quot;tree2&quot;, &quot;tree3&quot;, &quot;tree4&quot;];&amp;#10;    xys = [[(- 0.326), (- 0.1)], [(- 0.087), (- 0.195)], [0.135, (- 0.163)], [0.367, (- 0.18)]];&amp;#10;    sizes = [[0.23, 0.38], [0.115, 0.185], [0.16, 0.25], [0.132, 0.215]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_vehicles() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;car&quot;, &quot;ball&quot;, &quot;bicycle&quot;, &quot;bus&quot;];&amp;#10;    y0 = (- 0.178);&amp;#10;    xys = [[(- 0.374), (y0 + 0.002)], [(- 0.153), (y0 + 0.001)], [0.08, y0], [0.3425, y0]];&amp;#10;    sizes = [[0.176, 0.129], [0.18, 0.13], [0.21, 0.135], [0.235, 0.135]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_speed() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;faster&quot;, &quot;big&quot;, &quot;slow&quot;, &quot;old&quot;];&amp;#10;    y0 = (- 0.219);&amp;#10;    xys = [[(- 0.37), y0], [(- 0.149), y0], [0.083, (y0 - 0.003)], [0.338, (y0 - 0.003)]];&amp;#10;    sizes = [[0.172, 0.125], [0.177, 0.13], [0.21, 0.13], [0.217, 0.13]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_weight() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;dark&quot;, &quot;heavy&quot;, &quot;smooth&quot;, &quot;grey&quot;];&amp;#10;    y0 = (- 0.255);&amp;#10;    xys = [[(- 0.37), y0], [(- 0.149), y0], [0.083, (y0 - 0.003)], [0.338, (y0 - 0.003)]];&amp;#10;    sizes = [[0.172, 0.125], [0.177, 0.13], [0.21, 0.13], [0.217, 0.13]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_weather() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;cloudy&quot;, &quot;sunny&quot;, &quot;rainy&quot;, &quot;thundery&quot;];&amp;#10;    y0 = (- 0.162);&amp;#10;    xys = [[(- 0.36), (y0 + 0.005)], [(- 0.143), y0], [(((- 0.143) + 0.177) + 0.061), y0], [(((((- 0.143) + 0.177) + 0.208) + 0.061) + 0.035), y0]];&amp;#10;    sizes = [[0.172, 0.125], [0.177, 0.13], [0.208, 0.13], [0.22, 0.13]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_tools() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;scissors&quot;, &quot;nail&quot;, &quot;tweezers&quot;, &quot;tongs&quot;];&amp;#10;    y0 = (- 0.133);&amp;#10;    xys = [[(- 0.37), (y0 + 0.003)], [(- 0.149), y0], [0.083, y0], [0.347, y0]];&amp;#10;    sizes = [[0.172, 0.125], [0.177, 0.13], [0.21, 0.13], [0.235, 0.13]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_carrots() {&amp;#10;    var h0, names, sizes, xys, y0;&amp;#10;    names = [&quot;he&quot;, &quot;she&quot;, &quot;they&quot;, &quot;one_carrot&quot;];&amp;#10;    y0 = (- 0.163);&amp;#10;    h0 = 0.245;&amp;#10;    xys = [[(- 0.34), y0], [(- 0.13), y0], [0.11, (y0 + 0.002)], [0.347, (y0 + 0.002)]];&amp;#10;    sizes = [[0.19, h0], [0.19, h0], [0.24, h0], [0.19, h0]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_badminton() {&amp;#10;    var h0, names, sizes, xys, y0;&amp;#10;    names = [&quot;playing&quot;, &quot;played&quot;];&amp;#10;    y0 = (- 0.252);&amp;#10;    h0 = 0.09;&amp;#10;    xys = [[(- 0.255), y0], [0.27, y0]];&amp;#10;    sizes = [[0.4, h0], [0.37, h0]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_prepositions1() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;at&quot;, &quot;on&quot;, &quot;in&quot;, &quot;above&quot;];&amp;#10;    y0 = (- 0.255);&amp;#10;    xys = [[(- 0.37), y0], [(- 0.149), y0], [0.083, (y0 - 0.003)], [0.339, (y0 - 0.003)]];&amp;#10;    sizes = [[0.172, 0.125], [0.177, 0.13], [0.208, 0.13], [0.217, 0.13]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_prepositions2() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;at&quot;, &quot;on&quot;, &quot;in&quot;, &quot;under&quot;];&amp;#10;    y0 = (- 0.255);&amp;#10;    xys = [[(- 0.37), y0], [(- 0.149), y0], [0.083, (y0 - 0.003)], [0.339, (y0 - 0.003)]];&amp;#10;    sizes = [[0.172, 0.125], [0.177, 0.13], [0.208, 0.13], [0.217, 0.13]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_room1() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;duck&quot;, &quot;apple&quot;, &quot;bear&quot;, &quot;cup&quot;];&amp;#10;    y0 = (- 0.255);&amp;#10;    xys = [[(- 0.37), y0], [(- 0.149), y0], [0.083, (y0 - 0.003)], [0.339, (y0 - 0.003)]];&amp;#10;    sizes = [[0.172, 0.125], [0.177, 0.13], [0.208, 0.13], [0.217, 0.13]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_pen1() {&amp;#10;    var h0, names, sizes, w0, xys, y0;&amp;#10;    names = [&quot;P&quot;, &quot;M&quot;, &quot;N&quot;, &quot;B&quot;];&amp;#10;    y0 = (- 0.214);&amp;#10;    w0 = 0.123;&amp;#10;    h0 = 0.149;&amp;#10;    xys = [[(- 0.35), y0], [(- 0.128), y0], [0.107, y0], [0.338, y0]];&amp;#10;    sizes = [[w0, h0], [w0, h0], [w0, h0], [w0, h0]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_pen2() {&amp;#10;    var h0, names, sizes, w0, xys, y0;&amp;#10;    names = [&quot;P&quot;, &quot;M&quot;, &quot;N&quot;, &quot;B&quot;];&amp;#10;    y0 = (- 0.195);&amp;#10;    w0 = 0.123;&amp;#10;    h0 = 0.149;&amp;#10;    xys = [[(- 0.35), y0], [(- 0.128), y0], [0.107, y0], [0.338, y0]];&amp;#10;    sizes = [[w0, h0], [w0, h0], [w0, h0], [w0, h0]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_animals() {&amp;#10;    var h0, names, sizes, xys, y0;&amp;#10;    names = [&quot;monkey&quot;, &quot;goose&quot;];&amp;#10;    y0 = (- 0.138);&amp;#10;    h0 = 0.227;&amp;#10;    xys = [[0.043, y0], [0.315, y0]];&amp;#10;    sizes = [[0.16, h0], [0.25, h0]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_look() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;leaf&quot;, &quot;cup&quot;, &quot;book&quot;];&amp;#10;    y0 = (- 0.14);&amp;#10;    xys = [[(- 0.09), (y0 + 0.003)], [0.125, (y0 + 0.018)], [0.35, y0]];&amp;#10;    sizes = [[0.135, 0.135], [0.12, 0.17], [0.19, 0.16]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;function get_mice() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;car&quot;, &quot;rice&quot;, &quot;map&quot;];&amp;#10;    y0 = (- 0.14);&amp;#10;    xys = [[(- 0.075), y0], [0.15, (y0 + 0.023)], [0.368, y0]];&amp;#10;    sizes = [[0.21, 0.09], [0.155, 0.165], [0.18, 0.155]];&amp;#10;    return make_boxes(names, xys, sizes);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="specs_SCLAS" valType="code"/>
      </CodeComponent>
      <TextComponent name="begin_text">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="begin_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.6, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="trial">
      <CodeComponent name="trial_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;expVersion&quot;, expVersion);&amp;#10;cimgs = [];&amp;#10;cimg_names = [];&amp;#10;response = null;&amp;#10;has_responded = false;&amp;#10;replay_inst = true;&amp;#10;slide_num = slideNum;&amp;#10;qn_num = qnNum;&amp;#10;slide = make_slide(slide_num);&amp;#10;slide.autoDraw = true;&amp;#10;cimgs = all_cimgs[slide_num]();&amp;#10;radio0s = make_radios(make_radio0, cimgs);&amp;#10;radio1s = make_radios(make_radio1, cimgs);&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    cimgs[i].autoDraw = true;&amp;#10;    radio0s[i].autoDraw = true;&amp;#10;}&amp;#10;REPLAY.autoDraw = true;&amp;#10;NEXT.autoDraw = true;&amp;#10;COVER.autoDraw = true;&amp;#10;COVER.opacity = 0.9;&amp;#10;if (USE_AUDIO) {&amp;#10;    aud_file = `${AUD_DIR}/S-CLAS ${qn_num}.m4a`;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_START = 0;&amp;#10;    SLIDE_SOUND_START = 0;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    cimg_names = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        cimg_names.push(cimgs[i].name);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;thisExp.addData(&quot;expVersion&quot;, expVersion)&amp;#10;&amp;#10;cimgs = []&amp;#10;cimg_names = []&amp;#10;response = None&amp;#10;has_responded = False&amp;#10;replay_inst = True&amp;#10;&amp;#10;slide_num = slideNum&amp;#10;qn_num = qnNum&amp;#10;&amp;#10;slide = make_slide(slide_num)&amp;#10;slide.autoDraw = True&amp;#10;&amp;#10;cimgs = all_cimgs[slide_num]()&amp;#10;radio0s = make_radios(make_radio0, cimgs)&amp;#10;radio1s = make_radios(make_radio1, cimgs)&amp;#10;for i in range(len(cimgs)):&amp;#10;    cimgs[i].autoDraw = True&amp;#10;    radio0s[i].autoDraw = True&amp;#10;&amp;#10;REPLAY.autoDraw = True&amp;#10;NEXT.autoDraw = True&amp;#10;COVER.autoDraw = True&amp;#10;COVER.opacity = 0.9&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    aud_file = f&quot;{AUD_DIR}/S-CLAS {qn_num}.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_START = 0&amp;#10;    SLIDE_SOUND_START = 0&amp;#10;    SOUND.play()&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    cimg_names = []&amp;#10;    for i in range(len(cimgs)):&amp;#10;        cimg_names.append(cimgs[i].name)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;# Adding a block comment here will screw everything up! Bet you didn't know that!&amp;#10;&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L:&amp;#10;        if has_responded and NEXT.contains(MOUSE):&amp;#10;            continueRoutine = False&amp;#10;        if REPLAY.contains(MOUSE):&amp;#10;            if aimgs is not None:&amp;#10;                for aimg in aimgs:&amp;#10;                    aimg.autoDraw = False&amp;#10;            if t - SOUND_START &lt; SOUND_DUR:&amp;#10;                # Will only work if the sound has not ended yet&amp;#10;                SOUND.stop()&amp;#10;            SOUND = make_sound(&quot;sound&quot;, aud_file)&amp;#10;            SOUND_START = t&amp;#10;            SLIDE_SOUND_START = t&amp;#10;            SOUND.play()&amp;#10;        for i in range(len(cimgs)):&amp;#10;            if cimgs[i].contains(MOUSE) or radio0s[i].contains(MOUSE):&amp;#10;                if not has_responded:&amp;#10;                    has_responded = True&amp;#10;                    COVER.autoDraw = False&amp;#10;                    COVER.opacity = 0&amp;#10;                response = cimgs[i].name&amp;#10;                for radio in radio1s:&amp;#10;                    radio.autoDraw = False&amp;#10;                    if response == radio.name:&amp;#10;                        radio.autoDraw = True&amp;#10;&amp;#10;if replay_inst and t &gt; SOUND_DUR:&amp;#10;    replay_inst = False&amp;#10;    SOUND = make_sound(&quot;sound&quot;, REPLAY_AUD_FILE)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_START = t&amp;#10;    SOUND.play()&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    trial_text.text = f&quot;&quot;&quot;&amp;#10;taskName = {taskName}&amp;#10;aud_file = {aud_file}&amp;#10;slide_num = {slide_num}&amp;#10;qn_num = {qn_num}&amp;#10;cimg_names = {cimg_names}&amp;#10;corrAns = {corrAns}&amp;#10;response = {response}&amp;#10;has_responded = {has_responded}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if (MOUSE_L) {&amp;#10;        if ((has_responded &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;        if (REPLAY.contains(MOUSE)) {&amp;#10;            if ((aimgs !== null)) {&amp;#10;                for (var aimg, _pj_c = 0, _pj_a = aimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    aimg = _pj_a[_pj_c];&amp;#10;                    aimg.autoDraw = false;&amp;#10;                }&amp;#10;            }&amp;#10;            if (((t - SOUND_START) &lt; SOUND_DUR)) {&amp;#10;                SOUND.stop();&amp;#10;            }&amp;#10;            SOUND = make_sound(&quot;sound&quot;, aud_file);&amp;#10;            SOUND_START = t;&amp;#10;            SLIDE_SOUND_START = t;&amp;#10;            SOUND.play();&amp;#10;        }&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(cimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            if ((cimgs[i].contains(MOUSE) || radio0s[i].contains(MOUSE))) {&amp;#10;                if ((! has_responded)) {&amp;#10;                    has_responded = true;&amp;#10;                    COVER.autoDraw = false;&amp;#10;                    COVER.opacity = 0;&amp;#10;                }&amp;#10;                response = cimgs[i].name;&amp;#10;                for (var radio, _pj_f = 0, _pj_d = radio1s, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;                    radio = _pj_d[_pj_f];&amp;#10;                    radio.autoDraw = false;&amp;#10;                    if ((response === radio.name)) {&amp;#10;                        radio.autoDraw = true;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((replay_inst &amp;&amp; (t &gt; SOUND_DUR))) {&amp;#10;    replay_inst = false;&amp;#10;    SOUND = make_sound(&quot;sound&quot;, REPLAY_AUD_FILE);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_START = t;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    trial_text.text = `&amp;#10;taskName = ${taskName}&amp;#10;aud_file = ${aud_file}&amp;#10;slide_num = ${slide_num}&amp;#10;qn_num = ${qn_num}&amp;#10;cimg_names = ${cimg_names}&amp;#10;corrAns = ${corrAns}&amp;#10;response = ${response}&amp;#10;has_responded = ${has_responded}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;for (var cimg, _pj_c = 0, _pj_a = cimgs, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    cimg = _pj_a[_pj_c];&amp;#10;    cimg.size = [0, 0];&amp;#10;    cimg.autoDraw = false;&amp;#10;}&amp;#10;for (var radio, _pj_c = 0, _pj_a = radio0s, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    radio = _pj_a[_pj_c];&amp;#10;    radio.size = [0, 0];&amp;#10;    radio.autoDraw = false;&amp;#10;}&amp;#10;for (var radio, _pj_c = 0, _pj_a = radio1s, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    radio = _pj_a[_pj_c];&amp;#10;    radio.size = [0, 0];&amp;#10;    radio.autoDraw = false;&amp;#10;}&amp;#10;slide.size = [0, 0];&amp;#10;slide.autoDraw = false;&amp;#10;NEXT.autoDraw = false;&amp;#10;REPLAY.autoDraw = false;&amp;#10;is_correct = ((response === corrAns) ? 1 : 0);&amp;#10;psychoJS.experiment.addData(&quot;response&quot;, response);&amp;#10;psychoJS.experiment.addData(&quot;is_correct&quot;, is_correct);&amp;#10;psychoJS.experiment.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr());&amp;#10;psychoJS.experiment.addData(&quot;total_seconds&quot;, globalClock.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;&amp;#10;for cimg in cimgs:&amp;#10;    cimg.size = (0, 0)&amp;#10;    cimg.autoDraw = False&amp;#10;for radio in radio0s:&amp;#10;    radio.size = (0, 0)&amp;#10;    radio.autoDraw = False&amp;#10;for radio in radio1s:&amp;#10;    radio.size = (0, 0)&amp;#10;    radio.autoDraw = False&amp;#10;&amp;#10;slide.size = (0, 0)&amp;#10;slide.autoDraw = False&amp;#10;NEXT.autoDraw = False&amp;#10;REPLAY.autoDraw = False&amp;#10;&amp;#10;is_correct = 1 if response == corrAns else 0&amp;#10;thisExp.addData(&quot;response&quot;, response)&amp;#10;thisExp.addData(&quot;is_correct&quot;, is_correct)&amp;#10;&amp;#10;# Record timestamp and total time&amp;#10;thisExp.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr())&amp;#10;thisExp.addData(&quot;total_seconds&quot;, globalClock.getTime())&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trial_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="trial_anim">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;run_anim = False&amp;#10;aimgs = None&amp;#10;starts = None&amp;#10;ends = None&amp;#10;&amp;#10;def anim_q03():&amp;#10;    # Slide 04&amp;#10;    names = [&quot;box_cheetah&quot;, &quot;box_tortoise&quot;]&amp;#10;    y0 = 0.042&amp;#10;    xys = [(-0.19, y0), (0.2, y0)]&amp;#10;    sizes = [(0.34, 0.31), (0.31, 0.31)]&amp;#10;    starts = [1.7, 4.2]&amp;#10;    ends = [3.2, 5.7]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends&amp;#10;&amp;#10;def anim_q04():&amp;#10;    # Slide 05&amp;#10;    names = [&quot;box_feather&quot;, &quot;box_rock&quot;]&amp;#10;    y0 = 0.015&amp;#10;    xys = [(-0.228, y0), (0.175, y0)]&amp;#10;    sizes = [(0.28, 0.34), (0.32, 0.34)]&amp;#10;    starts = [2.3, 5.5]&amp;#10;    ends = [4, 7]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends&amp;#10;&amp;#10;def anim_q08():&amp;#10;    # Slide 09&amp;#10;    names = [&quot;box_playing&quot;, &quot;box_played&quot;]&amp;#10;    y0 = -0.252&amp;#10;    h0 = 0.105&amp;#10;    xys = [(-0.257, y0), (0.27, y0)]&amp;#10;    sizes = [(0.42, h0), (0.39, h0)]&amp;#10;    starts = [9.8, 18]&amp;#10;    ends = [14, 22]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends&amp;#10;&amp;#10;def anim_q12():&amp;#10;    # Slide 15&amp;#10;    names = [&quot;box_monkey&quot;, &quot;box_goose&quot;]&amp;#10;    y0 = -0.12&amp;#10;    h0 = 0.3&amp;#10;    xys = [(0.043, y0), (0.315, y0)]&amp;#10;    sizes = [(0.2, h0), (0.28, h0)]&amp;#10;    starts = [7.5, 11]&amp;#10;    ends = [9.5, 12]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends&amp;#10;&amp;#10;def anim_q13():&amp;#10;    # Slide 16&amp;#10;    names = [&quot;box_leaf&quot;, &quot;box_cup&quot;, &quot;box_book&quot;]&amp;#10;    y0 = -0.13&amp;#10;    h0 = 0.22&amp;#10;    xys = [(-0.09, y0), (0.125, y0), (0.35, y0)]&amp;#10;    sizes = [(0.16, h0), (0.15, h0), (0.21, h0)]&amp;#10;    starts = [8.2, 11.4, 14.6]&amp;#10;    ends = [9.7, 12.5, 15.7]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends&amp;#10;&amp;#10;def anim_q14():&amp;#10;    # Slide 17&amp;#10;    names = [&quot;box_car&quot;, &quot;box_rice&quot;, &quot;box_map&quot;]&amp;#10;    y0 = -0.135&amp;#10;    h0 = 0.2&amp;#10;    xys = [(-0.075, y0), (0.15, y0), (0.368, y0)]&amp;#10;    sizes = [(0.23, h0), (0.18, h0), (0.2, h0)]&amp;#10;    starts = [7.6, 10.6, 13.2]&amp;#10;    ends = [8.8, 11.5, 14.2]&amp;#10;    return make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends&amp;#10;&amp;#10;all_anims = {&amp;#10;    &quot;Q03&quot;: anim_q03,&amp;#10;    &quot;Q04&quot;: anim_q04,&amp;#10;    &quot;Q08&quot;: anim_q08,&amp;#10;    &quot;Q12&quot;: anim_q12,&amp;#10;    &quot;Q13&quot;: anim_q13,&amp;#10;    &quot;Q14&quot;: anim_q14,&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="run_anim = false;&amp;#10;aimgs = null;&amp;#10;starts = null;&amp;#10;ends = null;&amp;#10;function anim_q03() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;box_cheetah&quot;, &quot;box_tortoise&quot;];&amp;#10;    y0 = 0.042;&amp;#10;    xys = [[(- 0.19), y0], [0.2, y0]];&amp;#10;    sizes = [[0.34, 0.31], [0.31, 0.31]];&amp;#10;    starts = [1.7, 4.2];&amp;#10;    ends = [3.2, 5.7];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends];&amp;#10;}&amp;#10;function anim_q04() {&amp;#10;    var names, sizes, xys, y0;&amp;#10;    names = [&quot;box_feather&quot;, &quot;box_rock&quot;];&amp;#10;    y0 = 0.015;&amp;#10;    xys = [[(- 0.228), y0], [0.175, y0]];&amp;#10;    sizes = [[0.28, 0.34], [0.32, 0.34]];&amp;#10;    starts = [2.3, 5.5];&amp;#10;    ends = [4, 7];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends];&amp;#10;}&amp;#10;function anim_q08() {&amp;#10;    var h0, names, sizes, xys, y0;&amp;#10;    names = [&quot;box_playing&quot;, &quot;box_played&quot;];&amp;#10;    y0 = (- 0.252);&amp;#10;    h0 = 0.105;&amp;#10;    xys = [[(- 0.257), y0], [0.27, y0]];&amp;#10;    sizes = [[0.42, h0], [0.39, h0]];&amp;#10;    starts = [9.8, 18];&amp;#10;    ends = [14, 22];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends];&amp;#10;}&amp;#10;function anim_q12() {&amp;#10;    var h0, names, sizes, xys, y0;&amp;#10;    names = [&quot;box_monkey&quot;, &quot;box_goose&quot;];&amp;#10;    y0 = (- 0.12);&amp;#10;    h0 = 0.3;&amp;#10;    xys = [[0.043, y0], [0.315, y0]];&amp;#10;    sizes = [[0.2, h0], [0.28, h0]];&amp;#10;    starts = [7.5, 11];&amp;#10;    ends = [9.5, 12];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends];&amp;#10;}&amp;#10;function anim_q13() {&amp;#10;    var h0, names, sizes, xys, y0;&amp;#10;    names = [&quot;box_leaf&quot;, &quot;box_cup&quot;, &quot;box_book&quot;];&amp;#10;    y0 = (- 0.13);&amp;#10;    h0 = 0.22;&amp;#10;    xys = [[(- 0.09), y0], [0.125, y0], [0.35, y0]];&amp;#10;    sizes = [[0.16, h0], [0.15, h0], [0.21, h0]];&amp;#10;    starts = [8.2, 11.4, 14.6];&amp;#10;    ends = [9.7, 12.5, 15.7];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends];&amp;#10;}&amp;#10;function anim_q14() {&amp;#10;    var h0, names, sizes, xys, y0;&amp;#10;    names = [&quot;box_car&quot;, &quot;box_rice&quot;, &quot;box_map&quot;];&amp;#10;    y0 = (- 0.135);&amp;#10;    h0 = 0.2;&amp;#10;    xys = [[(- 0.075), y0], [0.15, y0], [0.368, y0]];&amp;#10;    sizes = [[0.23, h0], [0.18, h0], [0.2, h0]];&amp;#10;    starts = [7.6, 10.6, 13.2];&amp;#10;    ends = [8.8, 11.5, 14.2];&amp;#10;    return [make_boxes(names, xys, sizes, 1, &quot;red&quot;), starts, ends];&amp;#10;}&amp;#10;all_anims = {&quot;Q03&quot;: anim_q03, &quot;Q04&quot;: anim_q04, &quot;Q08&quot;: anim_q08, &quot;Q12&quot;: anim_q12, &quot;Q13&quot;: anim_q13, &quot;Q14&quot;: anim_q14};&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((USE_AUDIO &amp;&amp; _pj.in_es6(qn_num, all_anims))) {&amp;#10;    run_anim = true;&amp;#10;    [aimgs, starts, ends] = all_anims[qn_num]();&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;if USE_AUDIO and qn_num in all_anims:&amp;#10;    run_anim = True&amp;#10;    aimgs, starts, ends = all_anims[qn_num]()&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if run_anim:&amp;#10;    for i in range(len(aimgs)):&amp;#10;        if t - SLIDE_SOUND_START &gt;= starts[i]:&amp;#10;            aimgs[i].autoDraw = True&amp;#10;        if t - SLIDE_SOUND_START &gt;= ends[i]:&amp;#10;            aimgs[i].autoDraw = False&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if (run_anim) {&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(aimgs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if (((t - SLIDE_SOUND_START) &gt;= starts[i])) {&amp;#10;            aimgs[i].autoDraw = true;&amp;#10;        }&amp;#10;        if (((t - SLIDE_SOUND_START) &gt;= ends[i])) {&amp;#10;            aimgs[i].autoDraw = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (run_anim) {&amp;#10;    run_anim = false;&amp;#10;    aimgs = null;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if run_anim:&amp;#10;    run_anim = False&amp;#10;    aimgs = None&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trial_anim" valType="code"/>
      </CodeComponent>
      <TextComponent name="trial_text">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="trial_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.6, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="begin"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="0:" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$SEQ_FILE" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
